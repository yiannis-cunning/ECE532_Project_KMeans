// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="knn_top,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.180000,HLS_SYN_LAT=23541,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=1,HLS_SYN_FF=163,HLS_SYN_LUT=277,HLS_VERSION=2018_3}" *)

module knn_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        image_r_address0,
        image_r_ce0,
        image_r_q0,
        result,
        result_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] image_r_address0;
output   image_r_ce0;
input  [7:0] image_r_q0;
output  [31:0] result;
output   result_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg image_r_ce0;
reg result_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [12:0] centroids_0_address0;
reg    centroids_0_ce0;
wire   [7:0] centroids_0_q0;
wire   [12:0] next_mul_fu_148_p2;
reg   [12:0] next_mul_reg_252;
wire    ap_CS_fsm_state2;
wire   [31:0] best_class_cast2_fu_154_p1;
reg   [31:0] best_class_cast2_reg_257;
wire   [3:0] c_fu_164_p2;
reg   [3:0] c_reg_265;
wire   [9:0] p_1_i_fu_176_p2;
reg   [9:0] p_1_i_reg_273;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_i_fu_170_p2;
wire   [31:0] c_0_best_class_i_fu_212_p3;
wire   [31:0] class_min_dist_0_glo_fu_219_p3;
wire   [8:0] diff_i_fu_235_p2;
reg   [8:0] diff_i_reg_298;
wire    ap_CS_fsm_state4;
wire  signed [26:0] grp_fu_244_p3;
wire    ap_CS_fsm_state5;
reg   [3:0] best_class_reg_77;
reg   [31:0] best_class_i_reg_88;
reg   [31:0] global_min_dist_i_reg_101;
reg   [12:0] phi_mul_reg_113;
reg  signed [26:0] class_min_dist_i_reg_125;
wire   [0:0] exitcond2_i_fu_158_p2;
reg   [9:0] p_i_reg_137;
wire   [63:0] tmp_1_cast_fu_197_p1;
wire   [63:0] tmp_6_i_fu_182_p1;
wire   [12:0] tmp_6_i_cast_fu_187_p1;
wire   [12:0] tmp_1_fu_191_p2;
wire  signed [31:0] class_min_dist_i_cas_fu_202_p1;
wire   [0:0] tmp_1_i_fu_206_p2;
wire   [8:0] tmp_7_i_cast_fu_227_p1;
wire   [8:0] tmp_8_i_cast_fu_231_p1;
wire  signed [8:0] grp_fu_244_p0;
wire  signed [17:0] diff_i_cast_fu_241_p1;
wire  signed [8:0] grp_fu_244_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

knn_top_centroids_0 #(
    .DataWidth( 8 ),
    .AddressRange( 7840 ),
    .AddressWidth( 13 ))
centroids_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(centroids_0_address0),
    .ce0(centroids_0_ce0),
    .q0(centroids_0_q0)
);

knn_top_mac_muladd_9s_9s_27s_27_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 27 ),
    .dout_WIDTH( 27 ))
knn_top_mac_muladd_9s_9s_27s_27_1_1_U1(
    .din0(grp_fu_244_p0),
    .din1(grp_fu_244_p1),
    .din2(class_min_dist_i_reg_125),
    .dout(grp_fu_244_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        best_class_i_reg_88 <= c_0_best_class_i_fu_212_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        best_class_i_reg_88 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        best_class_reg_77 <= c_reg_265;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        best_class_reg_77 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_i_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        class_min_dist_i_reg_125 <= 27'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        class_min_dist_i_reg_125 <= grp_fu_244_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        global_min_dist_i_reg_101 <= class_min_dist_0_glo_fu_219_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        global_min_dist_i_reg_101 <= 32'd4294967295;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_i_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_i_reg_137 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_i_reg_137 <= p_1_i_reg_273;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_113 <= next_mul_reg_252;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_113 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        best_class_cast2_reg_257[3 : 0] <= best_class_cast2_fu_154_p1[3 : 0];
        c_reg_265 <= c_fu_164_p2;
        next_mul_reg_252 <= next_mul_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        diff_i_reg_298 <= diff_i_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_1_i_reg_273 <= p_1_i_fu_176_p2;
    end
end

always @ (*) begin
    if (((exitcond2_i_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_i_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        centroids_0_ce0 = 1'b1;
    end else begin
        centroids_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        image_r_ce0 = 1'b1;
    end else begin
        image_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_i_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        result_ap_vld = 1'b1;
    end else begin
        result_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_i_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_i_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign best_class_cast2_fu_154_p1 = best_class_reg_77;

assign c_0_best_class_i_fu_212_p3 = ((tmp_1_i_fu_206_p2[0:0] === 1'b1) ? best_class_cast2_reg_257 : best_class_i_reg_88);

assign c_fu_164_p2 = (best_class_reg_77 + 4'd1);

assign centroids_0_address0 = tmp_1_cast_fu_197_p1;

assign class_min_dist_0_glo_fu_219_p3 = ((tmp_1_i_fu_206_p2[0:0] === 1'b1) ? class_min_dist_i_cas_fu_202_p1 : global_min_dist_i_reg_101);

assign class_min_dist_i_cas_fu_202_p1 = class_min_dist_i_reg_125;

assign diff_i_cast_fu_241_p1 = $signed(diff_i_reg_298);

assign diff_i_fu_235_p2 = (tmp_7_i_cast_fu_227_p1 - tmp_8_i_cast_fu_231_p1);

assign exitcond2_i_fu_158_p2 = ((best_class_reg_77 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_i_fu_170_p2 = ((p_i_reg_137 == 10'd784) ? 1'b1 : 1'b0);

assign grp_fu_244_p0 = diff_i_cast_fu_241_p1;

assign grp_fu_244_p1 = diff_i_cast_fu_241_p1;

assign image_r_address0 = tmp_6_i_fu_182_p1;

assign next_mul_fu_148_p2 = (phi_mul_reg_113 + 13'd784);

assign p_1_i_fu_176_p2 = (p_i_reg_137 + 10'd1);

assign result = best_class_i_reg_88;

assign tmp_1_cast_fu_197_p1 = tmp_1_fu_191_p2;

assign tmp_1_fu_191_p2 = (phi_mul_reg_113 + tmp_6_i_cast_fu_187_p1);

assign tmp_1_i_fu_206_p2 = ((class_min_dist_i_cas_fu_202_p1 < global_min_dist_i_reg_101) ? 1'b1 : 1'b0);

assign tmp_6_i_cast_fu_187_p1 = p_i_reg_137;

assign tmp_6_i_fu_182_p1 = p_i_reg_137;

assign tmp_7_i_cast_fu_227_p1 = image_r_q0;

assign tmp_8_i_cast_fu_231_p1 = centroids_0_q0;

always @ (posedge ap_clk) begin
    best_class_cast2_reg_257[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //knn_top
