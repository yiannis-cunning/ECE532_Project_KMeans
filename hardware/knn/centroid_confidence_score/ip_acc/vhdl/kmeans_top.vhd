-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kmeans_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    image_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    image_r_ce0 : OUT STD_LOGIC;
    image_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    image_r_ce1 : OUT STD_LOGIC;
    image_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    result_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_ce0 : OUT STD_LOGIC;
    result_we0 : OUT STD_LOGIC;
    result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_ce1 : OUT STD_LOGIC;
    result_we1 : OUT STD_LOGIC;
    result_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kmeans_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kmeans_top,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.430250,HLS_SYN_LAT=448,HLS_SYN_TPT=none,HLS_SYN_MEM=1568,HLS_SYN_DSP=512,HLS_SYN_FF=31922,HLS_SYN_LUT=59662,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_classify_image_fu_45_ap_start : STD_LOGIC;
    signal grp_classify_image_fu_45_ap_done : STD_LOGIC;
    signal grp_classify_image_fu_45_ap_idle : STD_LOGIC;
    signal grp_classify_image_fu_45_ap_ready : STD_LOGIC;
    signal grp_classify_image_fu_45_image_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_classify_image_fu_45_image_r_ce0 : STD_LOGIC;
    signal grp_classify_image_fu_45_image_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_classify_image_fu_45_image_r_ce1 : STD_LOGIC;
    signal grp_classify_image_fu_45_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_classify_image_fu_45_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_classify_image_fu_45_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component classify_image IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        image_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        image_r_ce0 : OUT STD_LOGIC;
        image_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        image_r_ce1 : OUT STD_LOGIC;
        image_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_classify_image_fu_45 : component classify_image
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_classify_image_fu_45_ap_start,
        ap_done => grp_classify_image_fu_45_ap_done,
        ap_idle => grp_classify_image_fu_45_ap_idle,
        ap_ready => grp_classify_image_fu_45_ap_ready,
        image_r_address0 => grp_classify_image_fu_45_image_r_address0,
        image_r_ce0 => grp_classify_image_fu_45_image_r_ce0,
        image_r_q0 => image_r_q0,
        image_r_address1 => grp_classify_image_fu_45_image_r_address1,
        image_r_ce1 => grp_classify_image_fu_45_image_r_ce1,
        image_r_q1 => image_r_q1,
        ap_return_0 => grp_classify_image_fu_45_ap_return_0,
        ap_return_1 => grp_classify_image_fu_45_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_classify_image_fu_45_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_classify_image_fu_45_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_classify_image_fu_45_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_classify_image_fu_45_ap_ready = ap_const_logic_1)) then 
                    grp_classify_image_fu_45_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_classify_image_fu_45_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_classify_image_fu_45_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(grp_classify_image_fu_45_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_classify_image_fu_45_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_classify_image_fu_45_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_classify_image_fu_45_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_classify_image_fu_45_ap_start <= grp_classify_image_fu_45_ap_start_reg;
    image_r_address0 <= grp_classify_image_fu_45_image_r_address0;
    image_r_address1 <= grp_classify_image_fu_45_image_r_address1;
    image_r_ce0 <= grp_classify_image_fu_45_image_r_ce0;
    image_r_ce1 <= grp_classify_image_fu_45_image_r_ce1;
    result_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    result_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    result_ce0_assign_proc : process(grp_classify_image_fu_45_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_classify_image_fu_45_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_ce1_assign_proc : process(grp_classify_image_fu_45_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_classify_image_fu_45_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            result_ce1 <= ap_const_logic_1;
        else 
            result_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    result_d0 <= grp_classify_image_fu_45_ap_return_0;
    result_d1 <= grp_classify_image_fu_45_ap_return_1;

    result_we0_assign_proc : process(grp_classify_image_fu_45_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_classify_image_fu_45_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_we1_assign_proc : process(grp_classify_image_fu_45_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_classify_image_fu_45_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            result_we1 <= ap_const_logic_1;
        else 
            result_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
