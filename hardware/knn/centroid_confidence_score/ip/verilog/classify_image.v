// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module classify_image (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        image_r_address0,
        image_r_ce0,
        image_r_q0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 43'd1;
parameter    ap_ST_fsm_state2 = 43'd2;
parameter    ap_ST_fsm_state3 = 43'd4;
parameter    ap_ST_fsm_state4 = 43'd8;
parameter    ap_ST_fsm_state5 = 43'd16;
parameter    ap_ST_fsm_state6 = 43'd32;
parameter    ap_ST_fsm_state7 = 43'd64;
parameter    ap_ST_fsm_state8 = 43'd128;
parameter    ap_ST_fsm_state9 = 43'd256;
parameter    ap_ST_fsm_state10 = 43'd512;
parameter    ap_ST_fsm_state11 = 43'd1024;
parameter    ap_ST_fsm_state12 = 43'd2048;
parameter    ap_ST_fsm_state13 = 43'd4096;
parameter    ap_ST_fsm_state14 = 43'd8192;
parameter    ap_ST_fsm_state15 = 43'd16384;
parameter    ap_ST_fsm_state16 = 43'd32768;
parameter    ap_ST_fsm_state17 = 43'd65536;
parameter    ap_ST_fsm_state18 = 43'd131072;
parameter    ap_ST_fsm_state19 = 43'd262144;
parameter    ap_ST_fsm_state20 = 43'd524288;
parameter    ap_ST_fsm_state21 = 43'd1048576;
parameter    ap_ST_fsm_state22 = 43'd2097152;
parameter    ap_ST_fsm_state23 = 43'd4194304;
parameter    ap_ST_fsm_state24 = 43'd8388608;
parameter    ap_ST_fsm_state25 = 43'd16777216;
parameter    ap_ST_fsm_state26 = 43'd33554432;
parameter    ap_ST_fsm_state27 = 43'd67108864;
parameter    ap_ST_fsm_state28 = 43'd134217728;
parameter    ap_ST_fsm_state29 = 43'd268435456;
parameter    ap_ST_fsm_state30 = 43'd536870912;
parameter    ap_ST_fsm_state31 = 43'd1073741824;
parameter    ap_ST_fsm_state32 = 43'd2147483648;
parameter    ap_ST_fsm_state33 = 43'd4294967296;
parameter    ap_ST_fsm_state34 = 43'd8589934592;
parameter    ap_ST_fsm_state35 = 43'd17179869184;
parameter    ap_ST_fsm_state36 = 43'd34359738368;
parameter    ap_ST_fsm_state37 = 43'd68719476736;
parameter    ap_ST_fsm_state38 = 43'd137438953472;
parameter    ap_ST_fsm_state39 = 43'd274877906944;
parameter    ap_ST_fsm_state40 = 43'd549755813888;
parameter    ap_ST_fsm_state41 = 43'd1099511627776;
parameter    ap_ST_fsm_state42 = 43'd2199023255552;
parameter    ap_ST_fsm_state43 = 43'd4398046511104;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] image_r_address0;
output   image_r_ce0;
input  [7:0] image_r_q0;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg image_r_ce0;

(* fsm_encoding = "none" *) reg   [42:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [12:0] centroids_0_address0;
reg    centroids_0_ce0;
wire   [7:0] centroids_0_q0;
wire   [12:0] next_mul_fu_176_p2;
reg   [12:0] next_mul_reg_439;
wire    ap_CS_fsm_state2;
wire   [31:0] best_class_1_cast3_fu_182_p1;
reg   [31:0] best_class_1_cast3_reg_444;
wire   [3:0] c_fu_192_p2;
reg   [3:0] c_reg_452;
wire   [0:0] exitcond2_fu_186_p2;
wire   [9:0] p_1_fu_211_p2;
reg   [9:0] p_1_reg_465;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_205_p2;
wire   [31:0] c_0_best_class_fu_247_p3;
wire   [31:0] class_min_dist_0_glo_fu_254_p3;
wire   [8:0] diff_fu_270_p2;
reg   [8:0] diff_reg_490;
wire    ap_CS_fsm_state4;
wire  signed [26:0] grp_fu_431_p3;
wire    ap_CS_fsm_state5;
wire   [63:0] grp_fu_173_p1;
reg   [63:0] tmp_s_reg_500;
wire    ap_CS_fsm_state10;
wire   [63:0] grp_fu_168_p2;
reg   [63:0] x_assign_reg_505;
wire    ap_CS_fsm_state41;
reg   [0:0] p_Result_s_reg_510;
wire    ap_CS_fsm_state42;
wire   [31:0] p_Val2_5_fu_400_p3;
reg   [31:0] p_Val2_5_reg_515;
reg   [3:0] best_class_1_reg_98;
reg   [31:0] best_class_reg_109;
reg   [31:0] global_min_dist_reg_121;
reg   [12:0] phi_mul_reg_133;
reg  signed [26:0] class_min_dist_reg_145;
reg   [9:0] p_reg_157;
wire   [63:0] tmp_10_cast_fu_232_p1;
wire   [63:0] tmp_1_fu_217_p1;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_173_p0;
wire   [12:0] tmp_1_cast_fu_222_p1;
wire   [12:0] tmp_2_fu_226_p2;
wire  signed [31:0] class_min_dist_cast_fu_237_p1;
wire   [0:0] tmp_3_fu_241_p2;
wire   [8:0] tmp_4_cast_fu_262_p1;
wire   [8:0] tmp_5_cast_fu_266_p1;
wire   [63:0] p_Val2_s_fu_279_p1;
wire   [51:0] tmp_V_1_fu_300_p1;
wire   [53:0] mantissa_V_fu_304_p4;
wire   [10:0] tmp_V_fu_290_p4;
wire   [11:0] tmp_i_i_i_i_cast1_fu_318_p1;
wire   [11:0] sh_assign_fu_322_p2;
wire   [10:0] tmp_i_i_i_fu_336_p2;
wire   [0:0] isNeg_fu_328_p3;
wire  signed [11:0] tmp_i_i_i_cast_fu_342_p1;
wire   [11:0] ush_fu_346_p3;
wire  signed [31:0] sh_assign_2_cast_fu_354_p1;
wire   [53:0] tmp_1_i_i_i_cast_fu_362_p1;
wire   [136:0] mantissa_V_1_cast_fu_314_p1;
wire   [136:0] tmp_1_i_i_i_fu_358_p1;
wire   [53:0] r_V_fu_366_p2;
wire   [0:0] tmp_9_fu_378_p3;
wire   [136:0] r_V_1_fu_372_p2;
wire   [31:0] tmp_5_fu_386_p1;
wire   [31:0] tmp_7_fu_390_p4;
wire    ap_CS_fsm_state43;
wire   [31:0] result_V_1_fu_408_p2;
wire   [31:0] p_Val2_6_fu_413_p3;
wire  signed [8:0] grp_fu_431_p0;
wire  signed [17:0] diff_cast_fu_276_p1;
wire  signed [8:0] grp_fu_431_p1;
reg   [42:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 43'd1;
end

classify_image_centroids_0 #(
    .DataWidth( 8 ),
    .AddressRange( 7840 ),
    .AddressWidth( 13 ))
centroids_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(centroids_0_address0),
    .ce0(centroids_0_ce0),
    .q0(centroids_0_q0)
);

kmeans_top_ddiv_64ns_64ns_64_31_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
kmeans_top_ddiv_64ns_64ns_64_31_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4696837146684686336),
    .din1(tmp_s_reg_500),
    .ce(1'b1),
    .dout(grp_fu_168_p2)
);

kmeans_top_uitodp_32ns_64_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
kmeans_top_uitodp_32ns_64_6_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_173_p0),
    .ce(1'b1),
    .dout(grp_fu_173_p1)
);

kmeans_top_mac_muladd_9s_9s_27s_27_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 27 ),
    .dout_WIDTH( 27 ))
kmeans_top_mac_muladd_9s_9s_27s_27_1_1_U3(
    .din0(grp_fu_431_p0),
    .din1(grp_fu_431_p1),
    .din2(class_min_dist_reg_145),
    .dout(grp_fu_431_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        best_class_1_reg_98 <= c_reg_452;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        best_class_1_reg_98 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        best_class_reg_109 <= c_0_best_class_fu_247_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        best_class_reg_109 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        class_min_dist_reg_145 <= 27'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        class_min_dist_reg_145 <= grp_fu_431_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        global_min_dist_reg_121 <= class_min_dist_0_glo_fu_254_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        global_min_dist_reg_121 <= 32'd4294967295;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_reg_157 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_reg_157 <= p_1_reg_465;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_133 <= next_mul_reg_439;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_133 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        best_class_1_cast3_reg_444[3 : 0] <= best_class_1_cast3_fu_182_p1[3 : 0];
        c_reg_452 <= c_fu_192_p2;
        next_mul_reg_439 <= next_mul_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        diff_reg_490 <= diff_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_1_reg_465 <= p_1_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        p_Result_s_reg_510 <= p_Val2_s_fu_279_p1[32'd63];
        p_Val2_5_reg_515 <= p_Val2_5_fu_400_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_s_reg_500 <= grp_fu_173_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        x_assign_reg_505 <= grp_fu_168_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        centroids_0_ce0 = 1'b1;
    end else begin
        centroids_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        image_r_ce0 = 1'b1;
    end else begin
        image_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_return_0 = best_class_reg_109;

assign ap_return_1 = p_Val2_6_fu_413_p3;

assign best_class_1_cast3_fu_182_p1 = best_class_1_reg_98;

assign c_0_best_class_fu_247_p3 = ((tmp_3_fu_241_p2[0:0] === 1'b1) ? best_class_1_cast3_reg_444 : best_class_reg_109);

assign c_fu_192_p2 = (best_class_1_reg_98 + 4'd1);

assign centroids_0_address0 = tmp_10_cast_fu_232_p1;

assign class_min_dist_0_glo_fu_254_p3 = ((tmp_3_fu_241_p2[0:0] === 1'b1) ? class_min_dist_cast_fu_237_p1 : global_min_dist_reg_121);

assign class_min_dist_cast_fu_237_p1 = class_min_dist_reg_145;

assign diff_cast_fu_276_p1 = $signed(diff_reg_490);

assign diff_fu_270_p2 = (tmp_4_cast_fu_262_p1 - tmp_5_cast_fu_266_p1);

assign exitcond2_fu_186_p2 = ((best_class_1_reg_98 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_fu_205_p2 = ((p_reg_157 == 10'd784) ? 1'b1 : 1'b0);

assign grp_fu_173_p0 = (32'd1 + global_min_dist_reg_121);

assign grp_fu_431_p0 = diff_cast_fu_276_p1;

assign grp_fu_431_p1 = diff_cast_fu_276_p1;

assign image_r_address0 = tmp_1_fu_217_p1;

assign isNeg_fu_328_p3 = sh_assign_fu_322_p2[32'd11];

assign mantissa_V_1_cast_fu_314_p1 = mantissa_V_fu_304_p4;

assign mantissa_V_fu_304_p4 = {{{{1'd1}, {tmp_V_1_fu_300_p1}}}, {1'd0}};

assign next_mul_fu_176_p2 = (phi_mul_reg_133 + 13'd784);

assign p_1_fu_211_p2 = (p_reg_157 + 10'd1);

assign p_Val2_5_fu_400_p3 = ((isNeg_fu_328_p3[0:0] === 1'b1) ? tmp_5_fu_386_p1 : tmp_7_fu_390_p4);

assign p_Val2_6_fu_413_p3 = ((p_Result_s_reg_510[0:0] === 1'b1) ? result_V_1_fu_408_p2 : p_Val2_5_reg_515);

assign p_Val2_s_fu_279_p1 = x_assign_reg_505;

assign r_V_1_fu_372_p2 = mantissa_V_1_cast_fu_314_p1 << tmp_1_i_i_i_fu_358_p1;

assign r_V_fu_366_p2 = mantissa_V_fu_304_p4 >> tmp_1_i_i_i_cast_fu_362_p1;

assign result_V_1_fu_408_p2 = (32'd0 - p_Val2_5_reg_515);

assign sh_assign_2_cast_fu_354_p1 = $signed(ush_fu_346_p3);

assign sh_assign_fu_322_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast1_fu_318_p1));

assign tmp_10_cast_fu_232_p1 = tmp_2_fu_226_p2;

assign tmp_1_cast_fu_222_p1 = p_reg_157;

assign tmp_1_fu_217_p1 = p_reg_157;

assign tmp_1_i_i_i_cast_fu_362_p1 = $unsigned(sh_assign_2_cast_fu_354_p1);

assign tmp_1_i_i_i_fu_358_p1 = $unsigned(sh_assign_2_cast_fu_354_p1);

assign tmp_2_fu_226_p2 = (phi_mul_reg_133 + tmp_1_cast_fu_222_p1);

assign tmp_3_fu_241_p2 = ((class_min_dist_cast_fu_237_p1 < global_min_dist_reg_121) ? 1'b1 : 1'b0);

assign tmp_4_cast_fu_262_p1 = image_r_q0;

assign tmp_5_cast_fu_266_p1 = centroids_0_q0;

assign tmp_5_fu_386_p1 = tmp_9_fu_378_p3;

assign tmp_7_fu_390_p4 = {{r_V_1_fu_372_p2[84:53]}};

assign tmp_9_fu_378_p3 = r_V_fu_366_p2[32'd53];

assign tmp_V_1_fu_300_p1 = p_Val2_s_fu_279_p1[51:0];

assign tmp_V_fu_290_p4 = {{p_Val2_s_fu_279_p1[62:52]}};

assign tmp_i_i_i_cast_fu_342_p1 = $signed(tmp_i_i_i_fu_336_p2);

assign tmp_i_i_i_fu_336_p2 = (11'd1023 - tmp_V_fu_290_p4);

assign tmp_i_i_i_i_cast1_fu_318_p1 = tmp_V_fu_290_p4;

assign ush_fu_346_p3 = ((isNeg_fu_328_p3[0:0] === 1'b1) ? tmp_i_i_i_cast_fu_342_p1 : sh_assign_fu_322_p2);

always @ (posedge ap_clk) begin
    best_class_1_cast3_reg_444[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //classify_image
