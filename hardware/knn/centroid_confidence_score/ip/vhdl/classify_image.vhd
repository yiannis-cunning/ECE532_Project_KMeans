-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity classify_image is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    image_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    image_r_ce0 : OUT STD_LOGIC;
    image_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of classify_image is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_412E848000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000100101110100001001000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv13_310 : STD_LOGIC_VECTOR (12 downto 0) := "0001100010000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal centroids_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal centroids_0_ce0 : STD_LOGIC;
    signal centroids_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul_fu_176_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_reg_439 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal best_class_1_cast3_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal best_class_1_cast3_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_192_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_452 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_fu_211_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_1_reg_465 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_0_best_class_fu_247_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal class_min_dist_0_glo_fu_254_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal diff_fu_270_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal diff_reg_490 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_431_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_500 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_505 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal p_Result_s_reg_510 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal p_Val2_5_fu_400_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal best_class_1_reg_98 : STD_LOGIC_VECTOR (3 downto 0);
    signal best_class_reg_109 : STD_LOGIC_VECTOR (31 downto 0);
    signal global_min_dist_reg_121 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul_reg_133 : STD_LOGIC_VECTOR (12 downto 0);
    signal class_min_dist_reg_145 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_reg_157 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_cast_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_173_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_cast_fu_222_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_fu_226_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal class_min_dist_cast_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_cast_fu_262_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_cast_fu_266_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_s_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_1_fu_300_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_fu_304_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_fu_290_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_cast1_fu_318_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_322_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_fu_336_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_328_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_cast_fu_342_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_346_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_2_cast_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_i_i_cast_fu_362_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal mantissa_V_1_cast_fu_314_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_1_i_i_i_fu_358_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_366_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_9_fu_378_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_372_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_5_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_390_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal result_V_1_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_413_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal diff_cast_fu_276_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_431_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);

    component kmeans_top_ddiv_64ns_64ns_64_31_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kmeans_top_uitodp_32ns_64_6_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kmeans_top_mac_muladd_9s_9s_27s_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (26 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component classify_image_centroids_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    centroids_0_U : component classify_image_centroids_0
    generic map (
        DataWidth => 8,
        AddressRange => 7840,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => centroids_0_address0,
        ce0 => centroids_0_ce0,
        q0 => centroids_0_q0);

    kmeans_top_ddiv_64ns_64ns_64_31_1_U1 : component kmeans_top_ddiv_64ns_64ns_64_31_1
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_412E848000000000,
        din1 => tmp_s_reg_500,
        ce => ap_const_logic_1,
        dout => grp_fu_168_p2);

    kmeans_top_uitodp_32ns_64_6_1_U2 : component kmeans_top_uitodp_32ns_64_6_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_173_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_173_p1);

    kmeans_top_mac_muladd_9s_9s_27s_27_1_1_U3 : component kmeans_top_mac_muladd_9s_9s_27s_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 27,
        dout_WIDTH => 27)
    port map (
        din0 => grp_fu_431_p0,
        din1 => grp_fu_431_p1,
        din2 => class_min_dist_reg_145,
        dout => grp_fu_431_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    best_class_1_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                best_class_1_reg_98 <= c_reg_452;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                best_class_1_reg_98 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    best_class_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                best_class_reg_109 <= c_0_best_class_fu_247_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                best_class_reg_109 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    class_min_dist_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                class_min_dist_reg_145 <= ap_const_lv27_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                class_min_dist_reg_145 <= grp_fu_431_p3;
            end if; 
        end if;
    end process;

    global_min_dist_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                global_min_dist_reg_121 <= class_min_dist_0_glo_fu_254_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                global_min_dist_reg_121 <= ap_const_lv32_FFFFFFFF;
            end if; 
        end if;
    end process;

    p_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_reg_157 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_reg_157 <= p_1_reg_465;
            end if; 
        end if;
    end process;

    phi_mul_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_133 <= next_mul_reg_439;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_133 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    best_class_1_cast3_reg_444(3 downto 0) <= best_class_1_cast3_fu_182_p1(3 downto 0);
                c_reg_452 <= c_fu_192_p2;
                next_mul_reg_439 <= next_mul_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                diff_reg_490 <= diff_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_1_reg_465 <= p_1_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                p_Result_s_reg_510 <= p_Val2_s_fu_279_p1(63 downto 63);
                p_Val2_5_reg_515 <= p_Val2_5_fu_400_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_s_reg_500 <= grp_fu_173_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                x_assign_reg_505 <= grp_fu_168_p2;
            end if;
        end if;
    end process;
    best_class_1_cast3_reg_444(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_186_p2, ap_CS_fsm_state3, exitcond_fu_205_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= best_class_reg_109;
    ap_return_1 <= p_Val2_6_fu_413_p3;
    best_class_1_cast3_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(best_class_1_reg_98),32));
    c_0_best_class_fu_247_p3 <= 
        best_class_1_cast3_reg_444 when (tmp_3_fu_241_p2(0) = '1') else 
        best_class_reg_109;
    c_fu_192_p2 <= std_logic_vector(unsigned(best_class_1_reg_98) + unsigned(ap_const_lv4_1));
    centroids_0_address0 <= tmp_10_cast_fu_232_p1(13 - 1 downto 0);

    centroids_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            centroids_0_ce0 <= ap_const_logic_1;
        else 
            centroids_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    class_min_dist_0_glo_fu_254_p3 <= 
        class_min_dist_cast_fu_237_p1 when (tmp_3_fu_241_p2(0) = '1') else 
        global_min_dist_reg_121;
        class_min_dist_cast_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(class_min_dist_reg_145),32));

        diff_cast_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(diff_reg_490),18));

    diff_fu_270_p2 <= std_logic_vector(unsigned(tmp_4_cast_fu_262_p1) - unsigned(tmp_5_cast_fu_266_p1));
    exitcond2_fu_186_p2 <= "1" when (best_class_1_reg_98 = ap_const_lv4_A) else "0";
    exitcond_fu_205_p2 <= "1" when (p_reg_157 = ap_const_lv10_310) else "0";
    grp_fu_173_p0 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(global_min_dist_reg_121));
    grp_fu_431_p0 <= diff_cast_fu_276_p1(9 - 1 downto 0);
    grp_fu_431_p1 <= diff_cast_fu_276_p1(9 - 1 downto 0);
    image_r_address0 <= tmp_1_fu_217_p1(10 - 1 downto 0);

    image_r_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            image_r_ce0 <= ap_const_logic_1;
        else 
            image_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_328_p3 <= sh_assign_fu_322_p2(11 downto 11);
    mantissa_V_1_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_304_p4),137));
    mantissa_V_fu_304_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_300_p1) & ap_const_lv1_0);
    next_mul_fu_176_p2 <= std_logic_vector(unsigned(phi_mul_reg_133) + unsigned(ap_const_lv13_310));
    p_1_fu_211_p2 <= std_logic_vector(unsigned(p_reg_157) + unsigned(ap_const_lv10_1));
    p_Val2_5_fu_400_p3 <= 
        tmp_5_fu_386_p1 when (isNeg_fu_328_p3(0) = '1') else 
        tmp_7_fu_390_p4;
    p_Val2_6_fu_413_p3 <= 
        result_V_1_fu_408_p2 when (p_Result_s_reg_510(0) = '1') else 
        p_Val2_5_reg_515;
    p_Val2_s_fu_279_p1 <= x_assign_reg_505;
    r_V_1_fu_372_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_1_cast_fu_314_p1),to_integer(unsigned('0' & tmp_1_i_i_i_fu_358_p1(31-1 downto 0)))));
    r_V_fu_366_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_304_p4),to_integer(unsigned('0' & tmp_1_i_i_i_cast_fu_362_p1(31-1 downto 0)))));
    result_V_1_fu_408_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_5_reg_515));
        sh_assign_2_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_346_p3),32));

    sh_assign_fu_322_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast1_fu_318_p1));
    tmp_10_cast_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_226_p2),64));
    tmp_1_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_reg_157),13));
    tmp_1_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_reg_157),64));
    tmp_1_i_i_i_cast_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_cast_fu_354_p1),54));
    tmp_1_i_i_i_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_cast_fu_354_p1),137));
    tmp_2_fu_226_p2 <= std_logic_vector(unsigned(phi_mul_reg_133) + unsigned(tmp_1_cast_fu_222_p1));
    tmp_3_fu_241_p2 <= "1" when (unsigned(class_min_dist_cast_fu_237_p1) < unsigned(global_min_dist_reg_121)) else "0";
    tmp_4_cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_r_q0),9));
    tmp_5_cast_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(centroids_0_q0),9));
    tmp_5_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_378_p3),32));
    tmp_7_fu_390_p4 <= r_V_1_fu_372_p2(84 downto 53);
    tmp_9_fu_378_p3 <= r_V_fu_366_p2(53 downto 53);
    tmp_V_1_fu_300_p1 <= p_Val2_s_fu_279_p1(52 - 1 downto 0);
    tmp_V_fu_290_p4 <= p_Val2_s_fu_279_p1(62 downto 52);
        tmp_i_i_i_cast_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i_fu_336_p2),12));

    tmp_i_i_i_fu_336_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_fu_290_p4));
    tmp_i_i_i_i_cast1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_290_p4),12));
    ush_fu_346_p3 <= 
        tmp_i_i_i_cast_fu_342_p1 when (isNeg_fu_328_p3(0) = '1') else 
        sh_assign_fu_322_p2;
end behav;
